metadata {
  // Etape 2
  parameter String region {default "REUNION"}			// sous forme de liste deroulante "NORD" "SUD" "EST" OUEST" "REUNION"
  //parameter String inputDirNew {default "data/ENTREES"}	// repertoire avec les nouvelles donnees meteo
  parameter String inputDirNew {default "data/ENTREES"}	// repertoire avec les nouvelles donnees meteo
  // Etape 3
  parameter String inputDirWork {default "data/TRAVAIL"}
  // Etape 4
  parameter String date_debut {default "01/01/2016"}
  parameter String date_fin {default "31/12/2016"}
  parameter Boolean outputAllDates {default true}		// sous forme de case a cocher
  parameter Boolean outputLastDate {default true}		// sous forme de case a cocher
  parameter Boolean exportSHP {default true}
  parameter String outputDir {default "output"}
  
  parameter Boolean exportKML {default false}
  
}

scenario DynPopCulicoides {

  println("Model DynPopCulicoides ready to run")

let debutCalcul = new Date
  
//////////// Parametres
  
  fix frequencedisplay = 1 //frequence d'affichage - ici tous les jours
  fix dt = 0.1
  
  let bdateuser = Date|fromString("dd/MM/yyyy",date_debut) // dates souhaitees par l'utilisateur pour les sorties
  let edateuser = Date|fromString("dd/MM/yyyy",date_fin)
  
  //////////// 1) Instanciation des datafacers 
  let shp = new Shp	// le shapefile avec les sites de prelevement
  let nomDeFichier = inputDirWork + "/SHAPEFILE/SITES/elevages_cigal_join_req_min.shp"
  shp.setFileName(nomDeFichier)
 
  let shpStation = new ShpStation // le shapefile avec la localisation des stations
  nomDeFichier = inputDirWork + "/SHAPEFILE/STATIONS/31Stations.shp"
  shpStation.setFileName(nomDeFichier)
  
  let shpHum = new ShpHum
  nomDeFichier = inputDirWork + "/SHAPEFILE/STATIONS/Stations_Humidite.shp"
  shpHum.setFileName (nomDeFichier)
  
  let csvData = new CsvData // le fichier texte (csv) avec les donnees Meteo
  nomDeFichier = inputDirWork + "/CSVDATA/METEO/97404540.csv"
  csvData.setFileName(nomDeFichier)
  
  let csvHum = new CsvHum 
  nomDeFichier = inputDirWork + "/CSVDATA/METEO/HUMIDITE/97402240.csv"
  csvHum.setFileName(nomDeFichier)

  let csvDataNew = new CsvData // le fichier texte (csv) avec les nouvelles donnees Meteo
  nomDeFichier = inputDirNew + "/97404540.csv"
  csvDataNew.setFileName(nomDeFichier)
  
  let csvDataOut = new CsvData // le fichier texte (csv) avec l'ecriture des parametres de la simulation
  nomDeFichier = outputDir + "/historique_simulations.csv"
  csvDataOut.setFileName(nomDeFichier)
  
  let rasterMasque = new RasterMasque 
  nomDeFichier = inputDirWork + "/IMAGES/T40KCB_NDVI_2016/SEN2COR_MASKS"  
  //println(rasterMasque.size)
  //let xx = rasterMasque.readAllMasque()
  rasterMasque.setDirectory("data/TRAVAIL/IMAGES/T40KCB_NDVI_2016/SEN2COR_MASKS")  
  rasterMasque.next()
  //rasterMasque.setFileName(nomDeFichier)
  //xx.next()
  
  //println("xx.size: " + xx.size)
  /*rasterMasque.setFileName("data")
  xx.setDirectory("data/TRAVAIL") 
  rasterMasque.setDirectory(repertoire)//("data/TRAVAIL/IMAGES/T40KCB_NDVI_2016/SEN2COR_MASKS")
  rasterMasque.next() */
  
  let rasterNdvi = new RasterNdvi
  
  let masqueNdvi = new MasqueNdvi // instanciation de la relation entre une image ndvi et le masque associé
  
  let kmlout = new KmlOut	// le fichier KML en sortie
  nomDeFichier = outputDir + "/"+region + "_serietemporelle.kml"
  kmlout.setFileName(nomDeFichier)
  
  let shpout = new ShpOutAllDates	// le fichier ShapeFile en sortie : toutes les dates
  
//////////// 2) Lecture des donnees
 println("Reading data ... ")
 
 // List of sites obtained from the Shapefile datafacer
 //let lsitetot = new List<Site>
 let lsitetot = shp.readAllSite // La liste des polygones 
 println("shp read ...") 	
 
 
// List of meteorological station obtained from the Shapefile datafacer
 let lstation = shpStation.readAllLocStation()
  //println("found "+lstation.size()+" meteorological stations")
 let lstation_hum = shpHum.readAllStation_Hum() 
 
 let masque = rasterMasque.readAllMasque()
 let ndvi = rasterNdvi.readAllNdvi()
  
// Read temperature and rainfall data
 fix allMeteoData = new KeyMap<Integer,List<DataStation>>
 fix humData = new KeyMap<Integer,List<CSV_Humidite>>
  
 let i = 0
 for (s:lstation) {
  	let nomDeFichierCsv = inputDirWork + "/CSVDATA/METEO/"+s.numero+".csv"
  	csvData.fileName = nomDeFichierCsv

  	let DataMeteo = csvData.readAll()
  	
  	allMeteoData.put(i,DataMeteo)
  	i = i+1
  }
  
  let k = 0
  for (h:lstation_hum){
  	let nomDeFichierCSV = inputDirWork + "/CSVDATA/METEO/HUMIDITE/"+h.numero+".csv"
  	csvHum.fileName = nomDeFichierCSV  	
  	
  	let Data_Humidite = csvHum.readAll()
  	//println ("numero: " + Data_Humidite.get(0).numero)
  	
  	println("key : " + k + " num: " + h.numero)
  	println ("data humidite : " + Data_Humidite.get(1))
  	
  	humData.put(k,Data_Humidite)
  	k = k+1
  	println("taille humData :" + humData.size()) //+", " + humData.get(k).get(0).numero)
  	//println("get(0): " + humData.get(k).get(0).hum_max)
  }
    
  
    
//////////// 3) Initialisation
 //print("Initialization ... ")
 
 // Definition des parametres : date de debut et duree de la simulation
  fix bdate = Date|fromString("yyyy-MM-dd",/*allMeteoData.get(0).get(0).dateTXT)*/"2016-01-01")
  //println("bdate = " + bdate)
  let bdate1 = Date|fromString("yyyy-MM-dd",allMeteoData.get(0).get(0).dateTXT)
  bdate1.addYears(1)
  if (bdateuser.isBefore(bdate1)==true) {bdateuser = bdate1}	// pour garder une annee d'initialisation
  let edate = Date|fromString("yyyy-MM-dd",/*allMeteoData.get(0).get(0).dateTXT*/"2016-12-31   ")
  //edate.addDays(allMeteoData.get(0).size()-1)
  if(edateuser.isAfter(edate)==true) edateuser = edate
  //println("bdate = " + bdate + " ; bdateuser = " + bdateuser +" ; edateuser = " + edateuser + " ; edate = " + edate )
 

 
  
  // Modification des noms de fichiers de sorties
  //nomDeFichier = outputDir + "/"+region + "_serietemporelle.shp"
  let nomDeFichierShpAll = outputDir + "/"+region + "_" + bdateuser.getYear() + format(bdateuser.getMonth(),"00") + format(bdateuser.getDayOfMonth(),"00") + "_" + edateuser.getYear() + format(edateuser.getMonth(),"00") + format(edateuser.getDayOfMonth(),"00") +".shp"
  shpout.setFileName(nomDeFichierShpAll)
  
  if (outputAllDates==true) {
  	shpout.remove() // si le fichier Shape en sortie existe deja, il est supprime
  }
  
 let now = bdate.clone() 
 let test_display =0.0
 let fin = now.clone
 
 for(sit:lsitetot) {
    sit.eggs = 1000.0  
  	sit.larvae = 0.0
  	sit.pupae = 0.0
  	sit.adults = 0.0
  	sit.adults_ov = 0.0
//  	sit.rain7 = 0.0
//  	sit.raincumul7 = 0.0
//  	sit.rainday7 = 0
  
  	
  	// Connect sites to the closest meteo station
    sit.dist_station = 1000000.0
    i = 0
    for (s:lstation) {
		let dist = sit.geom.distance(s.geom)
		if (dist<sit.dist_station){
			sit.dist_station=dist
			sit.num_station=s.numero
			sit.id_station=i
			sit.diff_alt=(sit.altitude-s.altitude)
			//sit.ktminFill(csvData)	
			//sit.nom_station=s.name
		} // fin if
		i=i+1
	} // fin boucle for : station
	
	// Connexion à la station d'humidité la plus proche
	sit.dist_station_h = 10000000000.0
	k = 0
	for (h:lstation_hum) {
		let dist = sit.geom.distance(h.geom)
		if (dist < sit.dist_station_h){
			sit.dist_station_h = dist
			sit.num_station_h = h.numero
			sit.id_station_h = k
			println("k : " + k)
		}
		k=k+1
	}
	
} // fin boucle for : sites


//////////// 4) Simulation
//println("Simulation start: "+bdate)
  
let day = 0
let day_h = 0


//for (day_ : 0..0) {
while (now.isBefore(edateuser.addDays(1))==true) {
	//println(now)
	printOut("date en cours : "+now.toString("dd/MM/yyyy"))
	
	edateuser.addDays(-1)
	
// Connexion entre les images NDVI et le masque nuageux

	if (day == 1){
		masqueNdvi.connect(masque, ndvi)
		
	}
	if (day < 50) {
		//rasterMasque.next() // On utilise le raster suivant (à condition qu'ils soient bien rangés par odre !!)
		//rasterMasque.update()
	}
		
	//if (day>=365) {
	if (now.isAfter(bdateuser)==true) {		
		test_display = IEEEremainder(day,frequencedisplay)	// pour l'export des donnees apres la premiere annee
		fin = now.clone
        fin.addDays(frequencedisplay)
	}
	
	let j=0
	
	for (sit:lsitetot) {
	
		
		i = sit.id_station
		k = sit.id_station_h 
		///// SOLUTION TEMPORAIRE !!
		//if (k == 3) {k = 11}
		//if (k == 6) {k = 6}
		//if (k == 8) {k = 9}
		println("stat_h " + sit.id_station_h + " num_stat : " + sit.num_station_h)
		println("day: " + day)
		//k = toIntExact(sit.num_station_h)
      	
      	// Read temperature of the day
	  	sit.tmin = allMeteoData.get(i).get(day).tempMin
	  	sit.tmax = allMeteoData.get(i).get(day).tempMax
	  	/*if (day >= 1826) {
	  		day_h = day - 1826
	  		sit.humidite = humData.get(k).get(day_h).hum_moy	  		
	  	}*/
	  	//println("taille humData in for :" + humData.size())
	  	println("k: " + k)
	  	sit.humidite = humData.get(sit.id_station_h).get(day).hum_moy
	  	println("ok")	  	  	  	
  	  	// Read rainfall of the day
	  	sit.rain = allMeteoData.get(i).get(day).rainMM 
      	if (day>7) {
      		sit.rain7 = allMeteoData.get(i).get(day-7).rainMM
      	}
      	
      	if (day>17){
      		sit.tmoy0_17 = 0.0
      		for (d:0..17) {
      			sit.tmoy0_17 = sit.tmoy0_17 + ((allMeteoData.get(i).get(day-d).tempMin + allMeteoData.get(i).get(day-d).tempMax)/2)
      		}
      		sit.tmoy0_17 = sit.tmoy0_17 / 18.0
      	}
      	
      	if (day>18){
      		sit.tmoy16_18 = 0.0
      		for (d:16..18) {
      			sit.tmoy16_18 = sit.tmoy16_18 + ((allMeteoData.get(i).get(day-d).tempMin + allMeteoData.get(i).get(day-d).tempMax)/2)
      		}
      		sit.tmoy16_18 = sit.tmoy16_18 / 3.0
      	}
      	
      	if (day>14) { // entre deux captures, intervalle fixé à 14 jours
      		sit.tmin0_14 = sit.tmin
      		for (d:0..14) {
      			if (allMeteoData.get(i).get(day-d).tempMin < sit.tmin0_14) {
      				sit.tmin0_14 = allMeteoData.get(i).get(day-d).tempMin
      			}
      		}      		
      	}
      	
      	if (day>3) {
      		sit.tmax0_2 = (sit.tmax + sit.tmin) / 2
      		for (d:0..2) {
      			if (((allMeteoData.get(i).get(day-d).tempMax)+(allMeteoData.get(i).get(day-d).tempMin)/2) > sit.tmax0_2){
      				sit.tmax0_2 = allMeteoData.get(i).get(day-d).tempMax
      			}
      		}
      	}
      	
      	if (day>14) {
      		sit.tmax0_14 = sit.tmax
      		for (d:0..14) {
      			if (allMeteoData.get(i).get(day-d).tempMax > sit.tmax0_14){
      				sit.tmax0_14 = allMeteoData.get(i).get(day-d).tempMax 
      			}
      		}
      	}
      	
      	if (day>19){
      		sit.tmax1_19 = sit.tmax
      		for (d:0..19){
      			if (allMeteoData.get(i).get(day-d).tempMax > sit.tmax1_19){
      				sit.tmax1_19 = allMeteoData.get(i).get(day-d).tempMax
      			}
      		}
      	}
      	
      	if (day>11){
      		sit.tmax_11 = allMeteoData.get(i).get(day-11).tempMax 
      	}
      	
      	if (day>5) {
      		sit.rainmoy4_5 = (allMeteoData.get(i).get(day-5).rainMM + allMeteoData.get(i).get(day-4).rainMM)/2
      	}
  
      	
      	sit.updateTemp() // Mise a jour de la variable de température
      	sit.gradientAlt(sit.temperature) // Applique un gradient lié au différentie d'altitude sur la température héritée de la station météo
      	//sit.lifeCycleFunctions(sit.temperature_grad)	//Mise a jour des fonctions du modele de dynamique de population
      	//sit.dynPop(dt)		// Resolution des equations
      	sit.calcImicola(sit.temperature)
      	//sit.ktminFill(csvData)						
      	//sit.get0_30(now)
      	      	
      	if (exportKML==true) {
      		sit.classify()
      	}							// Classification pour affichage KML
      	
      	// Ecrit le nombre d'adultes présents, dans le KML ou le shapefile - a partir de l'annee 2
      	//if (day>=365) {									
      	if (now.isAfter(bdateuser)==true) {
       		if (test_display ==0) { 
       			if (exportKML==true) { sit.outputKml(day, now, frequencedisplay, kmlout)} // export Kml
      			sit.date_begin = now.toString("yyyy-MM-dd")	//for Shp export and use with time manager plugin	%Y-%m-%d
      			sit.date_end = fin.toString("yyyy-MM-dd")  // in QGIS
     		} 
      	} // fin du if
      	
      	j = j+1
      	
     
     } // fin de la boucle sur les parcelles
    
     // Write A2h values in shapefile - a partir de l'annee 2
     if (now.isAfter(bdateuser)==true) {									
       		if (test_display ==0) {
       			// Creation d'un Shp par date
       			if (outputAllDates==true) shpout.append(lsitetot)
       		}
     }
     
     day = day +1
     now.addDays(1)
} // fin de la boucle sur les jours

//////////// 5) Export

// Saving kml file 
println(".")
println("Saving kml file...")
kmlout.saveAsKml()
//print("Ok.")   

println("Geronimo !") 
}

scenario printOut(String msg) {
  println("-->  "+msg) // affiche le message localement pour vérifier ce qui se passe
  for (sl:simlisteners) sl.consoleEvent(msg+"\n") // Envoie le message (avec ajout d'un passage à la ligne suivante)
}