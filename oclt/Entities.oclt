entity Site {
	property Integer id
	property String pl
	property String commune
	property Double altitude	
	property Double diff_alt
	property Double coeff_alt
	property Integer kl
	property String nom
	
	property String presence_animaux // categorisation de la presence des animaux
	property String zone_veg // zone de végétation DAUPI, inscrite en dur dans le shp d'origine
	property String occsol // type d'occupation du sol Corine LandCover, inscrite en dur dans le shp d'origine
	property Double eau_500 // longueur totale des cours d'eau dans un rayon de 500 mètres
	property Double eau_1000 // longueur totale des cours d'eau dans un rayon de 1000 metres
	property Double eau_2000 // longueur totale des cours d'eau dans un rayon de 2000 metres
	property Integer ndvi // indice de végétation lu dans les rasters
	property Integer ndvi_id // identifiant du site à partir duquel le ndvi a été inféré si nécessaire
	property Integer ndvi_26 // indice de végétation à j-26
	property KeyMap<Integer, Integer> ndvi_map // liste des valeurs de ndvi par date
	
	//property MultiPolygon  geom
	property Point geom // les geometries des sites sont ici symbolisées par des points
	property String date_begin // for use with time manager plugin
	property String date_end  //  in QGIS
	property String nom_station  // Nom de la station meteo la plus proche
	property Double dist_station // Distance a la station meteo la plus proche
	property Integer id_station // Numero de station meteo la plus proche //identifiant interne
	property Long num_station // Numero de station meteo la plus proche
	
	property Double dist_station_h // Distance a la station mesurant l'humidite la plus proche
	property Integer id_station_h // Numero de station mesurant l'humidite la plus proche
	property Long num_station_h // Numero de station mesurant l'humidite la plus proche
	
	property Double dist_station_v
	property Integer id_station_v
	property Long num_station_v

	property Double prob_bolitinos
	property Double bolitinos
	property Double prob_enderleini
	property Double enderleini
	property Double prob_grahamii
	property Double grahamii	
	property Double prob_imicola
	property Double imicola // Nombre de culicoides imicola apparents sur le site
	property Double prob_kibatiensis
	property Double kibatiensis
	property Double seuil_pres
	
	// Les variables meteorologiques
	property Double rain // Pluie du jour
	property Double rain7 // Pluie a j-7
	property Double rainmoy4_5 // Moyenne de la pluie entre j-4 et j-5
	property Double rainlog1_2 // Log de la moyenne des pluies de la veille et de l'avant veille
	property Double rain_8 // Quantité de pluie tombée à j-8
	property Double rain_20 // Quantité de pluie tombée à j-20
	property Double rain_28 // Quantité de pluie tombée à j-28
	//property Double raincumul7 // Cumul des pluies sur 7 jours
	
	
	/*service updateVariablesRain () {
	raincumul7 = raincumul7 + rain -rain7	
	}*/
	
	property Integer classCuli
	
	
	///////// CHANTIER !!!! DECLARER DATE = now
	property Date date
	property KeyMap<Date, Double> ktmin

	property Double temperature // Temperature du jour
	property Double temperature_grad // Temperature avec gradient thermique lié à l'altitude
	property Double tmoy0_17	
	property Double tmoy16_18
	property Double tmin0_14
	property Double tmoymax0_2 // temperature moyenne maximale entre j-2 et j0
	property Double tmax0_14
	property Double tmax1_19
	property Double tmax_11
	property Double tmin // Temperature min
	property Double tmax // Temperature max
			
	property Double humidite // humidité du jour
	
	property String mesure_vent
	property Double vent
	property Double vent_1 // vent à j-1
	
	property Integer voisin_ndvi // site à partir duquel le ndvi est inféré spatialement
	
	service updateTemp () {
		temperature = (tmin + tmax) / 2
		//raincumul30 = raincumul30 + temperature - t_30
		//tmoy0_30 = raincumul30 / 30
	}
	
	service gradientAlt (Double temperature) { 
		temperature_grad = temperature - diff_alt*(6.5/1000)
	}
	
	service gradAlt () {
		coeff_alt = diff_alt*(6.5/1000) // gradient altitudinal de 6.5° de moins par 1000m d'altitude	
	}
	
	service attributionNdvi (List<Site> ls){ // fonction pour attribuer un ndvi par extrapolation spatiale
		if (ndvi == (-99999)) { // si le ndvi n'est pas lisible
			let dist = 100000.0
			for (l:ls){ // boucle pour trouver le site le plus proche ayant un ndvi lisible
				if (geom.distance(l.geom) < dist && l.ndvi != (-99999) && l.id != id){
					dist = geom.distance(l.geom)
					ndvi = l.ndvi
					ndvi_id = l.id
					println("ndvi attributed")
				}
			}
		}
		else {
			ndvi_id = 0
		}
	}
	
	service fillNdviMap (Integer a, Integer b){ // constitution d'une keymap pour acceder aux valeurs antérieures de ndvi
		ndvi_map.put(a,b)
	}
	
	service calcBolitinos (){
		let class_ndvi = 0.0 // BORNE INFERIEURE A DEFINIR, A PRIORI 2120
		
		if (ndvi > 5690 && ndvi < 6650) { 
			class_ndvi= 0.62374 
		}
		
		if (ndvi > 6650 && ndvi < 7380) {
			class_ndvi= 0.79835 
		}
		
		if (ndvi > 7380 && ndvi < 7850) {
			class_ndvi = 0.86642
		}
		
		if (ndvi > 7850) { // BORNE SUPERIEURE A DEFINIR, A PRIORI 9040 
			class_ndvi = 1.97628
		}
		
		let corine = 0.0 // (végétation clairesemée ??)
		
		if (occsol == "2430"){ // agricole avec de larges espaces naturels
			corine = 2.19826
		}
		if (occsol == "2112") { //canne
			corine = 0.0
		}
		if (occsol == "2310"){ // prairie
			corine = 2.21140
		}
		if (occsol == "2420"){ //système de cultures complexe
			corine = 2.92347
		}
		if (occsol == "1120") { // tissu urbain discontinu
			corine = 5.36079
		}
		/*if (occsol == "3330") { // vegetation clairsemee
			corine = 0.5647 // POUR L'INSTANT PAS PRISE EN COMPTE DANS LE MODELE
		}*/
		println("corine :" + corine)
		
		let animaux = 0.0 // Si aucun
		
		if (presence_animaux == "Intdrieur"){ // pb d'encodage des accents à résoudre pour l'orthographe
			animaux = 0.19408
		}
		if (presence_animaux == "Extdrieur"){ // pb d'encodage des accents à résoudre pour l'orthographe
			animaux = 0.20025
		}
		if (presence_animaux == "Intdrieur & Extirieur" || presence_animaux == "Intdrieur & Exterieur" || presence_animaux == "Intdrieur & Etxnrieur"){ // pb d'encodage des accents à résoudre pour l'orthographe
			animaux = 1.82176
		}
		println("animaux: " + animaux)
							
		let p = (-7.51177) + rainlog1_2 * (-0.68293) + tmin0_14 * 0.28132 + corine + animaux
		prob_bolitinos = (exp(p))/(1+exp(p))
		
		println("prob bolitinos: " + prob_bolitinos)
		
		if (prob_bolitinos < seuil_pres){
			bolitinos = 0.0 // seuil de présence/absence fixé à la probabilité de 0.5
		}
	}
	
	service calcEnderleini () {
		
		let class_ndvi = 0.0 // BORNE INFERIEURE A DEFINIR, A PRIORI 2120
		
		if (ndvi > 6070 && ndvi < 7690) { 
			class_ndvi= -1.71775
		}		
		
		if (ndvi > 7690) { // BORNE SUPERIEURE A DEFINIR, A PRIORI 9040 
			class_ndvi = -0.71894
		}
		
		let animaux = 0.0 // Si aucun ou intérieur

		if (presence_animaux == "Extdrieur"){ // pb d'encodage des accents à résoudre pour l'orthographe
			animaux = 2.73359
		}
		if (presence_animaux == "Intdrieur & Extirieur" || presence_animaux == "Intdrieur & Exterieur" || presence_animaux == "Intdrieur & Etxnrieur"){ // pb d'encodage des accents à résoudre pour l'orthographe
			animaux = 3.66219
		}
		
		let p = (-24.10444) + tmoy16_18 * 0.49397 + tmoymax0_2 * 0.42819 + humidite * (-0.06037) + rain_20 * 0.06346 + class_ndvi + animaux + eau_500 * 1.36678
		prob_enderleini = (exp(p))/(1+exp(p))
		
		if (prob_enderleini < seuil_pres){
			enderleini = 0.0
		}
	}
	
	service calcGrahamii () {
		
		let class_ndvi = 0.0 // BORNE INFERIEURE A DEFINIR, A PRIORI 2120
		
		if (ndvi > 6070 && ndvi < 7060) { 
			class_ndvi= 1.32130 
		}
		
		if (ndvi > 7060 && ndvi < 7690) {
			class_ndvi= 0.83841
		}
		
		if (ndvi > 7690) { // BORNE SUPERIEURE A DEFINIR, A PRIORI 9040 
			class_ndvi = 1.99477
		}
		
		let corine = 0.0 // (vegetation clairsemée ??)
		
		if (occsol == "2430"){ // agricole avec de larges espaces naturels 
			corine = 0.0
		}
		if (occsol == "2112") { //canne
			corine = 1.46914
		}
		if (occsol == "2310"){ // prairie
			corine = 2.07308
		}
		if (occsol == "2420"){ //système de cultures complexe
			corine = 3.50849
		}
		if (occsol == "1120") { // tissu urbain discontinu
			corine = 4.27313
		}
		
		let p = 2.11346 + tmax_11 * (-0.22395) + humidite * (-0.03525) + rain_28 * 0.03331 + class_ndvi + corine + eau_1000 * 0.27201
		prob_grahamii = (exp(p))/(1+exp(p))
		
		if (prob_grahamii < seuil_pres) {
			grahamii = 0.0
		}
		
	}
	
	service calcImicola (Double temperature){
		let daupi = 0.0
		
		if (zone_veg == "sav_fs"){
			daupi = 2.23167
		}
		if (zone_veg == "fh_bas") {
			daupi = 0.29061
		}
		if (zone_veg == "fh_mont_es") {
			daupi = 2.03136
		} 
		if (zone_veg == "fh_mont_ou") {
			daupi = 1.54592
		}
		if (zone_veg == "tamarins") {
			daupi = 0.0
		}
		
		print("daupi :" + daupi)
		
		//let animaux = 0.0
		let animaux = 0.0
		if (presence_animaux == "Intdrieur"){ // pb d'encodage des accents à résoudre pour l'orthographe
			animaux = 0.75859
		}
		if (presence_animaux == "Extdrieur"){ // pb d'encodage des accents à résoudre pour l'orthographe
			animaux = 2.99492
		}
		if (presence_animaux == "Intdrieur & Extirieur" || presence_animaux == "Intdrieur & Exterieur" || presence_animaux == "Intdrieur & Etxnrieur"){ // pb d'encodage des accents à résoudre pour l'orthographe
			animaux = 2.66738
		}
		println("animaux: " + animaux)
		
		let corine = 0.0
		if (occsol == "2430"){ // agricole avec de larges espaces naturels
			corine = 0.6646
		}
		if (occsol == "2112") { //canne
			corine = 0.0
		}
		if (occsol == "2310"){ // prairie
			corine = -1.7396
		}
		if (occsol == "2420"){ //système de cultures complexe
			corine = -1.1537
		}
		if (occsol == "1120") { // tissu urbain discontinu
			corine = 0.2944
		}
		if (occsol == "3330") { // vegetation clairsemee
			corine = 0.5647
		}
		println("corine :" + corine)
		
		let prob = 0.0 
		
		let p = -6.78291 + tmoy0_17 * 0.29637 + tmax0_14 * 0.09759 + humidite * (-0.04619) + rainmoy4_5 * (-0.05577) + daupi + animaux
		println("p: " + p)
		println("tmin: " + tmin + "; tmax: " + tmax)
		println ("tmoy0_17: " + tmoy0_17 + "; tmax0_14: " + tmax0_14 + "; humidite : " + humidite + "; rainmoy4_5: " + rainmoy4_5)
		//let p_exp = exp(p) 
		prob = (exp(p))/(1+exp(p))
		prob_imicola = prob
		println("prob: " + prob)
		if (prob < seuil_pres) {
			imicola = 0.0
		}
		if (prob >= seuil_pres) {
			updateTemp()
			let z = -1.8838 + temperature * 0.0476 + corine + (eau_500)*(-2.0592) + (eau_1000)*1.5144 + (eau_2000)*(-0.2148)
			println("temperature: " + temperature + "; corine: " + corine + "; eau_500: " + eau_500 + "; eau_1000: " + eau_1000 + "; eau_2000: " + eau_2000)
			println("z: " + z)
			imicola = pow(10,(z-1))
		}
	}
	
	service calcKibatiensis () {
		
		let tmin_qual = 0.0 // BORNE INFERIEURE A -1.5°
		if (tmax0_14 > 8.46 && tmax0_14 < 12.2) {
			tmin_qual  = 1.9955767
		} 
		if (tmax0_14 > 12.2 && tmax0_14 < 16.0) {
			tmin_qual = 0.2488846
		}
		if (tmax0_14 > 16.0 && tmax0_14 < 18.9) {
			tmin_qual = 0.5042979
		}
		if (tmax0_14 > 18.9) {
			tmin_qual = (-0.8201423) // BORNE SUPERIEUR A 25.1°
		}
		
		let corine = 0.0 // (végétation clairesemée ??)
		
		if (occsol == "2430"){ // agricole avec de larges espaces naturels
			corine = 1.4202163
		}
		if (occsol == "2112") { //canne
			corine = 0.0
		}
		if (occsol == "2310"){ // prairie
			corine = 3.0061298
		}
		if (occsol == "2420"){ //système de cultures complexe
			corine = 1.5044477
		}
		if (occsol == "1120") { // tissu urbain discontinu
			corine = 3.2433749
		}
		
		let pluie = 0.0
		if (rain > 0.0) {
			pluie = 0.8705422
		}
		
		let wind_1 = 0.0
		if (((vent_1 < 0.28) && (mesure_vent == "2")) || ((vent_1 < 2.60) && (mesure_vent == "10"))) {
			wind_1 = 0.0
		} 
		if (((vent_1 > 0.28) && (vent_1 < 0.97) && (mesure_vent == "2")) || ((vent_1 > 2.60) && (vent_1 < 5.80) &&(mesure_vent == "10"))) {
			wind_1 = (-0.7224247)
		}
		if (((vent_1 > 0.97) && (vent_1 < 1.66) && (mesure_vent == "2")) || ((vent_1 > 5.80) && (vent_1 < 8.99) &&(mesure_vent == "10"))) {
			wind_1 = (-1.5564980)
		}
		if (((vent_1 > 1.66) && (mesure_vent == "2"))|| ((vent_1 > 8.99) &&(mesure_vent == "10"))) {
			wind_1 = (-0.0513435)
		}
		
		let wind = 0.0
		if (((vent < 0.28) && (mesure_vent == "2")) || ((vent < 2.60) && (mesure_vent == "10"))) {
			wind = 0.0
		}
		if (((vent > 0.28) && (vent < 0.97) && (mesure_vent == "2")) || ((vent > 2.60) && (vent < 5.80) &&(mesure_vent == "10"))) {
			wind = 0.2876684
		}
		if (((vent > 0.97) && (mesure_vent == "2")) || ((vent > 5.80) && (mesure_vent == "10"))) {
			wind = (-0.86293340)
		}
		
		let p = (-2.8243244) + tmin_qual + humidite * (-0.0394085) + rain_8 * 0.0953447 + pluie + wind + wind_1 + ndvi_26 * 0.0005190 + corine + eau_500 * 0.6277210 
		prob_kibatiensis= (exp(p))/(1+exp(p))
	}
	
		service classify() {	// Classification en fonction de la quantite d'adultes estimee 
		if (prob_bolitinos < 0.50) {classCuli = 1}
		}
		
		service outputKml (Integer day, Date now, Integer frequencedisplay, KmlExport kml) {
		let id = "Site" + id + "_" + now.toString("yyyy-MM-dd")
        let style= "R0_" + classCuli 
        let deb = now
        let fin = now.clone
        fin.addDays(frequencedisplay)
        kml.addGeometry (style,id, deb, fin, geom, style,0) 
	} // Fin service outputKml

}
entity DataStation {			// le fichier texte contenant les donnees meteorologiques
  property String name
  property Integer numero
  property String dateTXT
  property Double tempC
  property Double tempMin
  property Double tempMax
  property Double rainMM
  property Date date 
  
 /*service getDate () {
  	date = Date|fromString("dd/MM/yyyy",dateTXT)	
  }*/
  
  
 service getTempMoy () {
  	tempC = (tempMin + tempMax) / 2	
  }
  
}

entity CSV_Humidite {
	property Integer numero
	property String dateTXT
	property Date date
	property Double hum_min
	property Double hum_moy
	property Double hum_max
	
/*  service getDate () {
  	date = Date|fromString("dd/MM/yyyy",dateTXT)	
  }*/
}

entity CSV_Vent {
	property Integer numero
	//property String dateTXT
	property Double vent
}

entity LocStation {			// la localisation des stations meteorologiques
 	property String name
 	property Integer id
 	property Long numero
 	property Point geom
 	property Integer altitude
 }
 
entity Station_Hum {
	property String name
	property Integer id
	property Long numero
	//property Integer altitude
	property Point geom
} 

entity Station_Vent {
	property String name
	property Integer id
	property Long numero
	property String mesure
	property Point geom
}

entity Ndvi {
	property Cell cell
	property Integer valeur
	property Boolean nuages
}

entity Masque {
	property Cell cell
	property Integer valeur
}

entity Grid {
	property MultiPolygon geom
	property String date_begin
	property Integer id
	property Integer sites
	property Double prob_bolitinos
	property Double prob_enderleini
	property Double prob_grahamii
	property Double prob_imicola
	property Double prob_kibatiensis
	property Double imicola
}